freq = wc,
max.words = 50,
random.order = T,
min.freq = 5,
colors = brewer.pal(5, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 50,
random.order = T,
min.freq = 3,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 50,
random.order = T,
min.freq = 1,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 50,
random.order = T,
min.freq = 20,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 50,
random.order = T,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 50,
random.order = T,
min.freq = 10,
colors = brewer.pal(8, "random-dark"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 50,
random.order = T,
min.freq = 10,
colors = brewer.pal("Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 50,
random.order = T,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = T,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = pa12,
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = pal2,
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = "pal2",
scale = c(5, 0.5))
library(RColorBrewer)
library(RColorBrewer)
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = pal2,
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = pa12,
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors=pal2,
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = "blues",
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = colorPalette("Blues"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = colorPalette = "Blues",
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = colorPalette = "Blue",
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = colors("blue"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
ordered.colors = T,
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 100,
random.order = F,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 75,
random.order = F,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
sentiment_data <- iconv(reviews$title)
s <- get_nrc_sentiment(sentiment_data)
s$score <- s$positive - s$negative #add column for overall score
s[1:10,]
review_score <- colSums(s[,])
print(review_score)
barplot(colSums(s),
las = 2,
col = rainbow(11),
ylab = "Count",
main = "Sentiment")
review_score <- colSums(s[,]) # sum columns to calculate overall score for each emotion
head(review_score)
barplot(colSums(s),
las = 2,
col = rainbow(11),
ylab = "Count",
main = "Sentiment")
review_score <- colSums(s[,]) # sum columns to calculate overall score for each emotion
print(review_score)
barplot(colSums(s),
las = 2,
col = rainbow(11),
ylab = "Count",
main = "Sentiment")
review_score <- colSums(s[,]) # sum columns to calculate overall score for each emotion
print(review_score)
barplot(colSums(s),
las = 2,
col = rainbow(11),
ylab = "Count",
main = "Sentiment")
review_score <- colSums(s[,]) # sum columns to calculate overall score for each emotion
print(review_score)
barplot(colSums(s),
las = 2,
col = rainbow(11),
ylab = "Count",
main = "Sentiment")
weekday_daily_activity <- daily_activity_filtered %>%
mutate(weekday = weekdays(date))
library(tidyverse)
library(lubridate)
library(janitor)
library(readr)
library(readxl)
library(hms)
library(scales)
library(ggpubr)
library(tidyverse)
library(lubridate)
library(janitor)
library(readr)
library(readxl)
library(hms)
library(scales)
library(ggpubr)
daily_activity <- read_excel("~/Documents/Coursera/Capstone Project/Fitabase Data 4.12.16-5.12.16/daily_activity.xlsx",
col_types = c("text", "date", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
hourly_steps <- read_excel("~/Documents/Coursera/Capstone Project/Fitabase Data 4.12.16-5.12.16/hourly_steps.xlsx",
col_types = c("text", "date", "numeric"))
sleep_day <- read_excel("~/Documents/Coursera/Capstone Project/Fitabase Data 4.12.16-5.12.16/sleep_day.xlsx",
col_types = c("text", "date", "numeric",
"numeric", "numeric"))
weight_log_info <- read_excel("~/Documents/Coursera/Capstone Project/Fitabase Data 4.12.16-5.12.16/weight_log_info.xlsx",
col_types = c("text", "date", "skip",
"numeric", "numeric", "numeric",
"numeric", "logical", "numeric"))
glimpse(daily_activity)
summary(daily_activity)
colnames(daily_activity)
glimpse(sleep_day)
summary(sleep_day)
colnames(sleep_day)
glimpse(weight_log_info)
summary(weight_log_info)
colnames(weight_log_info)
glimpse(hourly_steps)
summary(hourly_steps)
colnames(hourly_steps)
get_dupes(daily_activity)
daily_activity <- daily_activity %>%
clean_names() %>%
rename(date = activity_date)
daily_activity_filtered <-
daily_activity[daily_activity$total_steps != 0, ]
get_dupes(sleep_day)
sleep_day <- sleep_day %>%
clean_names() %>%
rename(date = sleep_day) %>%
distinct()
get_dupes(weight_log_info)
weight_log_info <- weight_log_info %>%
clean_names()
get_dupes(hourly_steps)
hourly_steps <- hourly_steps %>%
clean_names()
n_distinct(daily_activity$id)
n_distinct(hourly_steps$id)
n_distinct(sleep_day$id)
n_distinct(weight_log_info$id)
table_names <- c("daily_activity", "hourly_steps", "sleep_day", "weight_log_info")
unique_participants <- c(33, 33, 24, 8)
distinct_participants <- data.frame(table_names, unique_participants)
head(distinct_participants) # There are only 8 unique id's who participated in the weight log feature
weekday_daily_activity <- daily_activity_filtered %>%
mutate(weekday = weekdays(date))
weekday_daily_activity$weekday <-ordered(weekday_daily_activity$weekday, levels=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
weekday_daily_activity <- weekday_daily_activity %>%
group_by(weekday) %>%
summarize (avg_steps = mean(total_steps), avg_calories = mean(calories), avg_very_active_minutes = mean(very_active_minutes), avg_distance = mean(total_distance))
head(weekday_daily_activity)
avg_steps <- daily_activity_filtered %>%
summarize(mean(total_steps))
head(avg_steps) # 8319 steps
avg_cal <- daily_activity_filtered %>%
summarize(mean(calories))
head(avg_cal) # 2361 calories
avg_active_min <- daily_activity_filtered %>%
summarize(mean(very_active_minutes))
head(avg_active_min) # 23 very active minutes
avg_sedentary_time <- daily_activity_filtered %>%
summarize(mean(sedentary_minutes))
head(avg_sedentary_time) # 956 minutes
avg_dist <- daily_activity_filtered %>%
summarize(mean(total_distance))
head(avg_dist) # 5.98 miles
ggarrange(
ggplot(weekday_daily_activity) +
geom_col(aes(weekday, avg_steps), fill = "#205493") +
labs(x = NULL, y = "Average Steps", title = "Average Steps") +
geom_hline(yintercept = 8319) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
plot.title = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0)),
ggplot(weekday_daily_activity) +
geom_col(aes(weekday, avg_calories), fill = "#26C6DA") +
labs(x = NULL, y = "Average Calories", title = "Average Calories") +
geom_hline(yintercept = 2361) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
plot.title = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0)),
ggplot(weekday_daily_activity) +
geom_col(aes(weekday, avg_very_active_minutes), fill = "#78909C") +
labs(x = NULL, y = "Average Very \nActive Minutes", title = "Average Very Active Minutes") +
geom_hline(yintercept = 23) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
plot.title = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0)),
ggplot(weekday_daily_activity) +
geom_col(aes(weekday, avg_distance), fill = "#FF9776") +
labs(x = NULL, y = "Average Distance", title = "Average Distance") +
geom_hline(yintercept = 5.98) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
plot.title = element_text(face = "bold")) +
scale_y_continuous(expand = c(0,0))
)
steps_by_hour <- hourly_steps %>%
mutate(hour = format(as.POSIXct(activity_hour),
format = "%H:%M:%S")) %>%
group_by(hour) %>%
summarize(average_steps = mean(step_total)) %>%
ggplot() +
geom_col(mapping = aes(x = hour, y =average_steps, fill = average_steps)) +
scale_fill_gradient(name="Average Steps") +
labs(x = "Activity Hour", y = "Average Steps", title = "Avg Steps By Hour") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90),
axis.ticks = element_blank())
steps_by_hour
heatmap <- hourly_steps %>%
mutate(hour = format(as.POSIXct(activity_hour),
format = "%H:%M:%S")) %>%
group_by(id, hour) %>%
summarize(avg_steps = mean(step_total), .groups = "drop") %>%
ggplot(aes(x=hour, y=id)) + # y axis has to be in "chr" format to work.
geom_tile(aes(fill = avg_steps)) +
scale_fill_gradient(name = "Average Steps",
low = "#FFFFFF",
high = "#FF0000") +
labs(x = NULL, y = NULL, title = "Activity Heatmap") +
theme_classic() +
theme(plot.title.position = "plot",
plot.title = element_text(face = "bold", margin = margin(b=10)),
axis.text.x = element_text(angle = 90),
legend.title.align = 0.5,
legend.margin = margin(l = 10),
axis.ticks = element_blank())
heatmap
device_usage <- daily_activity %>%
filter(total_steps > 0) %>%
count(id, name = "days_used", sort = TRUE) %>%
mutate(use_category = case_when(days_used <= 10 ~ "Low Use - 1-10 days",
days_used > 10 & days_used <= 20 ~ "Moderate Use - 11-20 days",
TRUE ~ "High Use - 21-31 days" ))
head(device_usage)
tail(device_usage)
device_usage_percentage <- device_usage %>%
group_by(use_category) %>%
summarize(number_of_users = n()) %>%
mutate(percent_of_users = number_of_users/sum(number_of_users),
ymax = cumsum(percent_of_users),
ymin = c(0, head(ymax, n=-1)),
label_position = (ymax + ymin)/2,
label = paste0(scales::percent(percent_of_users))) %>%
arrange(desc(percent_of_users))
head(device_usage_percentage)
device_usage <- device_usage_percentage %>%
mutate(use_category = factor(use_category),
use_category = fct_reorder(use_category, percent_of_users, .desc = TRUE)) %>%
ggplot(aes(ymin = ymin, ymax = ymax,fill = use_category,
xmin= 0, xmax = 2)) +
geom_rect() +
scale_fill_manual(values = c("#006C7A", "#FFBEA9", "#78909C"), name = "Use Category") +
theme_classic() +
geom_text(aes(x = 1, y = label_position, label = label, fontface = "bold")) +
theme(text = element_text(size = 15),
axis.ticks = element_blank(),
plot.title = element_text(face = "bold", margin= margin(b=10))) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = NULL, y = NULL, title = "Device Usage")
device_usage
exercise <- daily_activity_filtered %>%
group_by(id) %>%
summarize(avg_active_min = mean(very_active_minutes)) %>%
arrange(desc(avg_active_min))
head(exercise)
tail(exercise)
recommended_exercise <- exercise %>%
tally((avg_active_min >= 30)/33, name = "avg_active_min") %>%
mutate(percent_over_30 = paste0(scales::percent(avg_active_min)))
head(recommended_exercise)
logged_weight_calories = daily_activity_filtered %>%
inner_join(weight_log_info, by="id") %>%
summarize(avg_calories = mean(calories))
head(logged_weight_calories)
logged <- daily_activity_filtered %>%
inner_join(weight_log_info, by="id", "date")
head(logged)
n_distinct(logged$id)
cor.test(logged$total_steps, logged$calories)
no_weight_calories = daily_activity_filtered %>%
anti_join(weight_log_info, by="id") %>%
summarize(avg_calories = mean(calories))
head(no_weight_calories)
did_not_log <- daily_activity_filtered %>%
anti_join(weight_log_info, by="id")
head(did_not_log)
n_distinct(did_not_log$id)
cor.test(did_not_log$total_steps, did_not_log$calories)
percent_difference <- (logged_weight_calories/no_weight_calories)*100
percent_difference
steps_vs_calories <-
ggplot(data = did_not_log, mapping = aes(x = total_steps, y = calories)) +
geom_point(alpha = 0.5, color = "#006C7A") +
geom_point(data = logged, alpha = 0.5, mapping = aes(x = total_steps, y = calories), color = "#FF7043", ) +
geom_smooth(data = did_not_log, formula = y~x, method = lm, se = FALSE, aes(color = "#006C7A")) +
geom_smooth(data = logged, formula = y~x, method = lm, se = FALSE, aes(color = "#FF7043")) +
theme_classic2() +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 10),
legend.title = element_blank()) +
labs(x = "Total Steps", y = "Calories",
title = "Steps Vs. Calories",
subtitle = "People who manually logged their weight burned 7% more calories \nthan people who did not log their weight") +
scale_color_manual(labels = c("Did Not Log Weight", "Logged Weight"),
values = c("#006C7A", "#FF7043"))
steps_vs_calories
sleep_day %>%
select(total_sleep_records, total_minutes_asleep, total_time_in_bed) %>%
summary()
wc <- sort(rowSums(tdm), decreasing = T)
set.seed(2000)
wordcloud(words = names(wc),
freq = wc,
max.words = 75,
random.order = F,
min.freq = 10,
colors = brewer.pal(8, "Dark2"),
scale = c(5, 0.5))
